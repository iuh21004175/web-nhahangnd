document.addEventListener('DOMContentLoaded', () => {
  const tbody = document.getElementById('shiftTableBody');
  const form = document.getElementById('shiftRegistrationForm');
  const submitButton = form.querySelector('button[type="submit"]');

  // H√†m l·∫•y th·ª© Hai c·ªßa tu·∫ßn m·ªõi (lu√¥n l·∫•y tu·∫ßn k·∫ø ti·∫øp sau Ch·ªß Nh·∫≠t tu·∫ßn n√†y)
  // H√†m t√≠nh ng√†y th·ª© 2 ti·∫øp theo
const getNextMonday = () => {
  const today = new Date();
  const day = today.getDay();
  const diff = (day === 0) ? 1 : (8 - day); // N·∫øu Ch·ªß Nh·∫≠t th√¨ diff=1, c√≤n l·∫°i 8 - day
  today.setDate(today.getDate() + diff);
  today.setHours(0, 0, 0, 0);
  return today;
};

// H√†m t√≠nh s·ªë tu·∫ßn trong nƒÉm (tu·∫ßn b·∫Øt ƒë·∫ßu t·ª´ th·ª© 2 ƒë·∫ßu ti√™n c·ªßa nƒÉm) ƒë·∫°t chu·∫©n ISO 8601:
function getCustomWeekNumber(date) {
    const tempDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    const day = tempDate.getUTCDay() || 7; // 1 (Mon) to 7 (Sun)
    tempDate.setUTCDate(tempDate.getUTCDate() + 4 - day);
    const yearStart = new Date(Date.UTC(tempDate.getUTCFullYear(), 0, 1));
    const weekNo = Math.ceil((((tempDate - yearStart) / 86400000) + 1) / 7);
    return weekNo;
}

// H√†m l·∫•y ng√†y th·ª© 2 ƒë·∫ßu ti√™n c·ªßa nƒÉm
function getFirstMondayOfYear(year) {
  const jan1 = new Date(year, 0, 1);
  const day = jan1.getDay();
  const diff = (day === 0 ? 1 : 8 - day);
  jan1.setDate(jan1.getDate() + diff);
  return jan1;
}


  // T√≠nh ng√†y Ch·ªß Nh·∫≠t tu·∫ßn hi·ªán t·∫°i
  const now = new Date();
  const daysToSunday = (7 - now.getDay()) % 7;
  const sunday = new Date(now);
  sunday.setDate(now.getDate() + daysToSunday);
  sunday.setHours(23, 59, 59, 999); // Ch·ªß Nh·∫≠t 23h59p59s

  // T·∫°o th√¥ng b√°o h·∫°n ƒëƒÉng k√Ω
  const deadlineNotice = document.createElement('div');
  deadlineNotice.style.background = '#e0f7fa';
  deadlineNotice.style.border = '1px solid #b2ebf2';
  deadlineNotice.style.padding = '6px 12px';
  deadlineNotice.style.borderRadius = '4px';
  deadlineNotice.style.fontSize = '14px';
  deadlineNotice.style.color = '#004d40';
  deadlineNotice.style.marginBottom = '10px';
  deadlineNotice.style.textAlign = 'center';

  if (now > sunday) {
    deadlineNotice.innerHTML = `‚ùå ƒê√£ qu√° h·∫°n ƒëƒÉng k√Ω (Ch·ªß Nh·∫≠t, ${sunday.toLocaleDateString('vi-VN')})`;
    submitButton.disabled = true;
  } else {
    deadlineNotice.innerHTML = `üìÖ H·∫°n ƒëƒÉng k√Ω l√† Ch·ªß Nh·∫≠t, ${sunday.toLocaleDateString('vi-VN')}`;
  }

  form.insertBefore(deadlineNotice, form.firstChild);

  // Render b·∫£ng tr·ªëng tu·∫ßn m·ªõi
  const renderTable = () => {
    const startDate = getNextMonday();
    tbody.innerHTML = '';
    const daysOfWeek = ['Th·ª© hai', 'Th·ª© ba', 'Th·ª© t∆∞', 'Th·ª© nƒÉm', 'Th·ª© s√°u', 'Th·ª© b·∫£y', 'Ch·ªß nh·∫≠t'];

    for (let i = 0; i < 7; i++) {
      const date = new Date(startDate);
      date.setDate(startDate.getDate() + i);
      const formattedDate = date.toLocaleDateString('vi-VN');
      const tr = document.createElement("tr");

      tr.innerHTML = `
        <td><strong>${daysOfWeek[i]}</strong><br><small>${formattedDate}</small></td>
        <td><input type="checkbox" name="shifts[${i}][morning]" value="1" data-shift="0"></td>
        <td><input type="checkbox" name="shifts[${i}][afternoon]" value="2" data-shift="1"></td>
      `;
      tbody.appendChild(tr);
    }
  };

  // Render b·∫£ng l·ªãch ƒë√£ ƒëƒÉng k√Ω
  const renderLichLamViec = (data) => {
    const startDate = getNextMonday();
    const daysOfWeek = ['Th·ª© hai', 'Th·ª© ba', 'Th·ª© t∆∞', 'Th·ª© nƒÉm', 'Th·ª© s√°u', 'Th·ª© b·∫£y', 'Ch·ªß nh·∫≠t'];
    const formatDate = date => date.toLocaleDateString('sv-SE');

    tbody.innerHTML = '';

    for (let i = 0; i < 7; i++) {
      const date = new Date(startDate);
      date.setDate(startDate.getDate() + i);

      const ngayStr = formatDate(date);
      const formattedDate = date.toLocaleDateString('vi-VN');

      const hasMorning = data.some(item => item.ngay === ngayStr && item.caLamViec === 0);
      const hasAfternoon = data.some(item => item.ngay === ngayStr && item.caLamViec === 1);

      const tr = document.createElement("tr");
      tr.innerHTML = `
        <td><strong>${daysOfWeek[i]}</strong><br><small>${formattedDate}</small></td>
        <td><input type="checkbox" name="shifts[${i}][morning]" value="1" data-shift="0" ${hasMorning ? 'checked' : ''}></td>
        <td><input type="checkbox" name="shifts[${i}][afternoon]" value="2" data-shift="1" ${hasAfternoon ? 'checked' : ''}></td>
      `;
      tbody.appendChild(tr);
    }
  };

  // L·∫•y l·ªãch l√†m vi·ªác t·ª´ server v√† l·ªçc tu·∫ßn hi·ªán t·∫°i
  async function getAPILichLamViec() {
    const response = await fetch('/api/lich-lam-viec');
    try {
      const data = await response.json();
      if (data.status) {
        const startDate = getNextMonday(); 
        const currentWeek = getCustomWeekNumber(startDate); 
        const filteredList = data.list.filter(item => item.tuan === currentWeek);
        return filteredList;
      } else {
        console.error('L·ªói server:', data.error);
        return [];
      }
    } catch (error) {
      console.error('Error:', error);
    }
  }
  
  // Load d·ªØ li·ªáu khi v√†o trang
  getAPILichLamViec().then(data => {
    if (data && data.length > 0) {
      renderLichLamViec(data);
    } else {
      renderTable();
    }
  });

  // X·ª≠ l√Ω submit ƒëƒÉng k√Ω
  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const shifts = [];
    const checkboxes = form.querySelectorAll('input[type="checkbox"]:checked');

    if (checkboxes.length === 0) {
      alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ca l√†m vi·ªác!');
      return;
    }

    checkboxes.forEach(checkbox => {
      const nameParts = checkbox.name.match(/\[(\d)\]\[(\w+)\]/);
      if (nameParts) {
        const dayIndex = parseInt(nameParts[1]);
        const shiftType = nameParts[2];
        const shiftValue = shiftType === 'morning' ? 0 : 1;

        const date = new Date(getNextMonday());
        date.setDate(date.getDate() + dayIndex);

        const formattedDate = date.toLocaleDateString('sv-SE');

        shifts.push({
          ngay: formattedDate,
          tuan: getCustomWeekNumber(date),
          caLamViec: shiftValue,
          trangThai: 0
        });
      }
    });

    try {
      const response = await fetch('/api/them-lich-lam-viec', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ shifts })
      });

      const result = await response.json();
      console.log("K·∫øt qu·∫£ ph·∫£n h·ªìi t·ª´ server: ", result);

      if (result.status === false) {
        alert(`ƒêƒÉng k√Ω th·∫•t b·∫°i: ${result.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
      } else {
        alert('ƒêƒÉng k√Ω th√†nh c√¥ng!');
      }
    } catch (error) {
      console.error('L·ªói:', error);
      alert('C√≥ l·ªói x·∫£y ra khi g·ª≠i y√™u c·∫ßu.');
    }
  });

});
